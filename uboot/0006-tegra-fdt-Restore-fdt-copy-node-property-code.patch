From 779ee18591348bf7a413dec9e383dc0f274491a1 Mon Sep 17 00:00:00 2001
From: Tom Warren <twarren@nvidia.com>
Date: Fri, 15 Feb 2019 09:23:10 -0800
Subject: [PATCH] tegra: fdt: Restore fdt copy node/property code

These routines were removed in commit aeff514b, and are now being
restored to help with the goal of having U-Boot merge the DTB info
found in the CBoot DTB passed in RAM with a kernel DTB found on the
rootfs (SD-card on Porg, for instance).

Currently the fdt_copy_env_proplist and fdt_copy_env_nodelist calls
are not present in dt-setup.c. They will be added in a separate patch,
along with env strings (in tegra210-common.h or a board-specific header
like p3450-porg.h) that will indicate the properties or nodes that need
to be copied into the disk-based kernel DTB before handing it off to
the kernel.

Bug 2481530

Change-Id: I52836faf4f398128bfb848d4e98e527a1f0bee65
Signed-off-by: Tom Warren <twarren@nvidia.com>
Reviewed-on: https://git-master.nvidia.com/r/2020445
Reviewed-by: Stephen Warren <swarren@nvidia.com>
GVS: Gerrit_Virtual_Submit
Reviewed-by: mobile promotions <svcmobile_promotions@nvidia.com>
Tested-by: mobile promotions <svcmobile_promotions@nvidia.com>
---
 arch/arm/mach-tegra/cboot.c   |   5 +
 arch/arm/mach-tegra/dt-edit.c | 249 +++++++++++++++++++++++++++++++++-
 arch/arm/mach-tegra/dt-edit.h |   6 +-
 3 files changed, 253 insertions(+), 7 deletions(-)

diff --git a/arch/arm/mach-tegra/cboot.c b/arch/arm/mach-tegra/cboot.c
index 16c4cf306e..1215146c4b 100644
--- a/arch/arm/mach-tegra/cboot.c
+++ b/arch/arm/mach-tegra/cboot.c
@@ -469,6 +469,11 @@ static int set_fdt_addr(void)
 	return 0;
 }
 
+void *fdt_copy_get_blob_src_default(void)
+{
+	return (void *)cboot_boot_x0;
+}
+
 /*
  * Attempt to use /chosen/nvidia,ether-mac in the cboot DTB to U-Boot's
  * ethaddr environment variable if possible.
diff --git a/arch/arm/mach-tegra/dt-edit.c b/arch/arm/mach-tegra/dt-edit.c
index 8e7176bbaf..dbb36f1b64 100644
--- a/arch/arm/mach-tegra/dt-edit.c
+++ b/arch/arm/mach-tegra/dt-edit.c
@@ -1,5 +1,5 @@
 /*
- *  Copyright (C) 2010-2017 NVIDIA CORPORATION.
+ *  Copyright (C) 2010-2019 NVIDIA CORPORATION.
  *
  * SPDX-License-Identifier: GPL-2.0
  */
@@ -13,7 +13,191 @@
 #include <env.h>
 #include "dt-edit.h"
 
+#define fdt_for_each_property(fdt, prop, parent)		\
+	for (prop = fdt_first_property_offset(fdt, parent);	\
+	     prop >= 0;						\
+	     prop = fdt_next_property_offset(fdt, prop))
 typedef int iter_envitem(void *blob_dst, char *item, void *param);
+static int fdt_copy_node_content(void *blob_src, int ofs_src, void *blob_dst,
+		int ofs_dst, int indent)
+{
+	int ofs_src_child, ofs_dst_child;
+
+	/*
+	 * FIXME: This doesn't remove properties or nodes in the destination
+	 * that are not present in the source. For the nodes we care about
+	 * right now, this is not an issue.
+	 */
+
+	fdt_for_each_property(blob_src, ofs_src_child, ofs_src) {
+		const void *prop;
+		const char *name;
+		int len, ret;
+
+		prop = fdt_getprop_by_offset(blob_src, ofs_src_child, &name,
+					     &len);
+		log_debug("%s: %*scopy prop: %s\n", __func__, indent, "", name);
+
+		ret = fdt_setprop(blob_dst, ofs_dst, name, prop, len);
+		if (ret < 0) {
+			pr_err("Can't copy DT prop %s\n", name);
+			return ret;
+		}
+	}
+
+	fdt_for_each_subnode(ofs_src_child, blob_src, ofs_src) {
+		const char *name;
+
+		name = fdt_get_name(blob_src, ofs_src_child, NULL);
+		log_debug("%s: %*scopy node: %s\n", __func__, indent, "", name);
+
+		ofs_dst_child = fdt_subnode_offset(blob_dst, ofs_dst, name);
+		if (ofs_dst_child < 0) {
+			log_debug("%s: %*s(creating it in dst)\n", __func__,
+				  indent, "");
+			ofs_dst_child = fdt_add_subnode(blob_dst, ofs_dst,
+							name);
+			if (ofs_dst_child < 0) {
+				pr_err("Can't copy DT node %s\n", name);
+				return ofs_dst_child;
+			}
+		}
+
+		fdt_copy_node_content(blob_src, ofs_src_child, blob_dst,
+				      ofs_dst_child, indent + 2);
+	}
+
+	return 0;
+}
+
+static int fdt_add_path(void *blob, const char *path)
+{
+	char *pcopy, *tmp, *node;
+	int ofs_parent, ofs_child, ret;
+
+	if (path[0] != '/') {
+		pr_err("Can't add path %s; missing leading /", path);
+		return -1;
+	}
+	path++;
+	if (!*path) {
+		log_debug("%s: path points at DT root!", __func__);
+		return 0;
+	}
+
+	pcopy = strdup(path);
+	if (!pcopy) {
+		pr_err("strdup() failed");
+		return -1;
+	}
+
+	tmp = pcopy;
+	ofs_parent = 0;
+	while (true) {
+		node = strsep(&tmp, "/");
+		if (!node)
+			break;
+		log_debug("%s: node=%s\n", __func__, node);
+		ofs_child = fdt_subnode_offset(blob, ofs_parent, node);
+		if (ofs_child < 0)
+			ofs_child = fdt_add_subnode(blob, ofs_parent, node);
+		if (ofs_child < 0) {
+			pr_err("Can't create DT node %s\n", node);
+			ret = ofs_child;
+			goto out;
+		}
+		ofs_parent = ofs_child;
+	}
+	ret = ofs_parent;
+
+out:
+	free(pcopy);
+
+	return ret;
+}
+
+static iter_envitem fdt_iter_copy_prop;
+static int fdt_iter_copy_prop(void *blob_dst, char *prop_path, void *blob_src)
+{
+	char *prop_name, *node_path;
+	const void *prop;
+	int ofs_src, ofs_dst, len, ret;
+
+	prop_name = strrchr(prop_path, '/');
+	if (!prop_name) {
+		pr_err("Can't copy prop %s; missing /", prop_path);
+		return -1;
+	}
+	*prop_name = 0;
+	prop_name++;
+	node_path = prop_path;
+
+	if (*node_path) {
+		ofs_src = fdt_path_offset(blob_src, node_path);
+		if (ofs_src < 0) {
+			pr_err("DT node %s missing in source; can't copy %s\n",
+			      node_path, prop_name);
+			return -1;
+		}
+
+		ofs_dst = fdt_path_offset(blob_dst, node_path);
+		if (ofs_src < 0) {
+			pr_err("DT node %s missing in dest; can't copy prop %s\n",
+			      node_path, prop_name);
+			return -1;
+		}
+	} else {
+		ofs_src = 0;
+		ofs_dst = 0;
+	}
+
+	prop = fdt_getprop(blob_src, ofs_src, prop_name, &len);
+	if (!prop) {
+		pr_err("DT property %s/%s missing in source; can't copy\n",
+		      node_path, prop_name);
+		return -1;
+	}
+
+	ret = fdt_setprop(blob_dst, ofs_dst, prop_name, prop, len);
+	if (ret < 0) {
+		pr_err("Can't set DT prop %s/%s\n", node_path, prop_name);
+		return ret;
+	}
+
+	return 0;
+}
+
+static iter_envitem fdt_iter_copy_node;
+static int fdt_iter_copy_node(void *blob_dst, char *path, void *blob_src)
+{
+	int ofs_dst, ofs_src;
+	int ret;
+
+	ofs_dst = fdt_add_path(blob_dst, path);
+	if (ofs_dst < 0) {
+		pr_err("Can't find/create dest DT node %s to copy\n", path);
+		return ofs_dst;
+	}
+
+	if (!fdtdec_get_is_enabled(blob_dst, ofs_dst)) {
+		log_debug("%s: DT node %s disabled in dest; skipping copy\n",
+			  __func__, path);
+		return 0;
+	}
+
+	ofs_src = fdt_path_offset(blob_src, path);
+	if (ofs_src < 0) {
+		pr_err("DT node %s missing in source; can't copy\n", path);
+		return 0;
+	}
+
+	ret = fdt_copy_node_content(blob_src, ofs_src, blob_dst,
+				    ofs_dst, 2);
+	if (ret < 0)
+		return ret;
+
+	return 0;
+}
 
 static iter_envitem fdt_iter_del_node;
 static int fdt_iter_del_node(void *blob_dst, char *node_path, void *unused_param)
@@ -25,7 +209,7 @@ static int fdt_iter_del_node(void *blob_dst, char *node_path, void *unused_param
 	if (ofs == -FDT_ERR_NOTFOUND)
 		return 0;
 	if (ofs < 0) {
-		error("DT node %s lookup failure; can't del node\n", node_path);
+		pr_err("DT node %s lookup failure; can't del node\n", node_path);
 		return ofs;
 	}
 
@@ -40,7 +224,7 @@ static int fdt_iter_del_prop(void *blob_dst, char *prop_path, void *unused_param
 
 	prop_name = strrchr(prop_path, '/');
 	if (!prop_name) {
-		error("Can't del prop %s; missing /", prop_path);
+		pr_err("Can't del prop %s; missing /", prop_path);
 		return -1;
 	}
 	*prop_name = 0;
@@ -53,7 +237,7 @@ static int fdt_iter_del_prop(void *blob_dst, char *prop_path, void *unused_param
 		if (ofs == -FDT_ERR_NOTFOUND)
 			return 0;
 		if (ofs < 0) {
-			error("DT node %s lookup failure; can't del prop %s\n",
+			pr_err("DT node %s lookup failure; can't del prop %s\n",
 			      node_path, prop_name);
 			return ofs;
 		}
@@ -73,7 +257,7 @@ static int fdt_iter_envlist(iter_envitem *func, void *blob_dst, const char *env_
 	char *items, *tmp, *item;
 	int ret;
 
-	items = getenv(env_varname);
+	items = env_get(env_varname);
 	if (!items) {
 		log_debug("%s: No env var %s\n", __func__, env_varname);
 		return 0;
@@ -81,7 +265,7 @@ static int fdt_iter_envlist(iter_envitem *func, void *blob_dst, const char *env_
 
 	items = strdup(items);
 	if (!items) {
-		error("strdup(%s) failed", env_varname);
+		pr_err("strdup(%s) failed", env_varname);
 		return -1;
 	}
 
@@ -106,6 +290,59 @@ out:
 	return ret;
 }
 
+__weak void *fdt_copy_get_blob_src_default(void)
+{
+	return NULL;
+}
+
+static void *no_self_copy(void *blob_src, void *blob_dst)
+{
+	if (blob_src == blob_dst)
+		return NULL;
+	return blob_src;
+}
+
+static void *fdt_get_copy_blob_src(void *blob_dst)
+{
+	char *src_addr_s;
+
+	src_addr_s = env_get("fdt_copy_src_addr");
+	if (!src_addr_s)
+		return no_self_copy(fdt_copy_get_blob_src_default(), blob_dst);
+	return no_self_copy((void *)simple_strtoul(src_addr_s, NULL, 16),
+			    blob_dst);
+}
+
+int fdt_copy_env_nodelist(void *blob_dst)
+{
+	void *blob_src;
+
+	log_debug("%s:\n", __func__);
+
+	blob_src = fdt_get_copy_blob_src(blob_dst);
+	if (!blob_src) {
+		log_debug("%s: No source DT\n", __func__);
+		return 0;
+	}
+
+	return fdt_iter_envlist(fdt_iter_copy_node, blob_dst, "fdt_copy_node_paths", blob_src);
+}
+
+int fdt_copy_env_proplist(void *blob_dst)
+{
+	void *blob_src;
+
+	log_debug("%s:\n", __func__);
+
+	blob_src = fdt_get_copy_blob_src(blob_dst);
+	if (!blob_src) {
+		log_debug("%s: No source DT\n", __func__);
+		return 0;
+	}
+
+	return fdt_iter_envlist(fdt_iter_copy_prop, blob_dst, "fdt_copy_prop_paths", blob_src);
+}
+
 int fdt_del_env_nodelist(void *blob_dst)
 {
 	log_debug("%s:\n", __func__);
diff --git a/arch/arm/mach-tegra/dt-edit.h b/arch/arm/mach-tegra/dt-edit.h
index 441a50f17a..c2763aa8a7 100644
--- a/arch/arm/mach-tegra/dt-edit.h
+++ b/arch/arm/mach-tegra/dt-edit.h
@@ -1,8 +1,12 @@
 /*
- *  Copyright (C) 2010-2017 NVIDIA CORPORATION.
+ *  Copyright (C) 2010-2019 NVIDIA CORPORATION.
  *
  * SPDX-License-Identifier: GPL-2.0
  */
 
+void *fdt_copy_get_blob_src_default(void);
+
+int fdt_copy_env_proplist(void *blob_dst);
+int fdt_copy_env_nodelist(void *blob_dst);
 int fdt_del_env_nodelist(void *blob_dst);
 int fdt_del_env_proplist(void *blob_dst);
-- 
2.25.1

